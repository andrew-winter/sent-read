scrapes <- c("httr", "geniusr", "tidytext", "textdata")
lapply(scrapes, require, character.only = TRUE)
baseURL <- "https://api.genius.com/search?q="
token <- "Z12YlAUALbWknjemUTrwHSnGkbbCpbprSqoVbt7yXhjz0sDX_v3pRnNPTq8k2Ldm"
afinn <- get_sentiments("afinn")
bing <- get_sentiments("bing")
loughran <- get_sentiments("loughran")
quick_albums <- function(search, artist = NULL) {
  genius_search <- search_song(search)
  genius_tibble <- lapply(genius_search$song_id, get_song_meta) %>% 
    bind_rows %>% as_tibble %>% select(song_name, artist_name, album_name,
    song_id, album_id, release_date) %>% 
      arrange(as.numeric(left(release_date, 4)),
              as.numeric(mid(release_date, 6, 2)))
  unique_ids <- unique(genius_tibble$album_id)
return(list(genius_tibble, unique_ids))
}
# ^Rough-and-tumble 'quick_albums()' function--------------------------------
quick_sentiment <- function(...) {
  Tracklists <- lapply(list(...), scrape_tracklist)
  Lyrics <- list()
    for (album in 1:length(Tracklists)) {
      Lyrics[[album]] <- lapply(Tracklists[[album]]$song_lyrics_url,
      scrape_lyrics_url) }
  Tokens <- list()
    for (album in 1:length(Tracklists)) {
      Tokens[[album]] <- lapply(Lyrics[[album]], unnest_tokens, word, line)}
  SentList <- list()
    for (album in 1:length(Tokens)) {
      SentList[[album]] <- cbind.data.frame(
        Tracklists[[album]]$song_title,
        lapply(Tokens[[album]], inner_join, afinn, "word") %>%
          sapply(positive_sent),
        lapply(Tokens[[album]], inner_join, afinn, "word") %>%
          sapply(negative_sent),
        sapply(Tokens[[album]], song_length)
      )
    names(SentList[[album]]) <- c("song", "pos", "neg", "wlength")
    }
  Sent <- bind_rows(SentList, .id = "album") %>% as_tibble %>% 
    mutate(dif = pos + neg)
return(Sent)
}
# ^Rough-and-tumble 'quick_sentiment()' function--------------------------------
quick_sent_plot <- function(x, style = "SIMPLE") {
  x$album <- factor(x$album, levels = unique(as.character(x$album)))
  x$song <- factor(x$song, levels = unique(as.character(x$song)))
  plot <- ggplot(x, aes(x = song)) +
    geom_col(aes(y = pos, fill = album), color = "black", alpha = 0.6) + 
    geom_col(aes(y = neg), color = "black", alpha = 0.5) +
    labs(y = "negativity / positivity")
  if (style == "SIMPLE") {
    plot <- plot + theme(axis.title.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      legend.position = "none")
  } else {
    plot <- plot + theme(axis.text.x =
      element_text(angle = 90, hjust = 1), legend.position = "none")}
return(plot)
}
# ^Rough-and-tumble 'quick_sent_plot()' function--------------------------------
# Other functions specifically for lyric sentiment analysis---------------------
afinn_join <- function(song) {song %>% 
  anti_join(stop_words, by = "word") %>% 
    inner_join(afinn, by = "word")}
positive_sent <- function(song) {sum(song$value[song$value > 0])}
negative_sent <- function(song) {sum(song$value[song$value < 0])}
bing_positive_sent <- function(song) {
  song$sentiment[song$sentiment == "positive"] %>% length()}
bing_negative_sent <- function(song) {
  song$sentiment[song$sentiment == "negative"] %>% length() *-1}
song_length <- function(song) {song %>% bind_rows %>% nrow}



Hammeta <- search_song(search_term = "Hamilton")$song_id[[1]] %>% get_song_meta()
HamLyrics <- list()
HamLyrics <- lapply(scrape_tracklist(Hammeta$album_id)$song_lyrics_url,  
  scrape_lyrics_url)
HamTokens <- lapply(HamLyrics, unnest_tokens, word, line)
HamSent <- list()
for (song in 1:46) {
  HamSent[[song]] <- cbind.data.frame(
    HamTokens[[song]]$song_name[[1]],
    positive_sent(lapply(HamTokens, inner_join, afinn, by = "word")[[song]]),
    negative_sent(lapply(HamTokens, inner_join, afinn, by = "word")[[song]])
  )}
HamSentiment <- bind_rows(HamSent)
names(HamSentiment) <- c("song", "pos", "neg")

HamSentiment$song <- factor(HamSentiment$song, 
  levels = unique(as.character(HamSentiment$song)) %>% rev)
HamPlot <- ggplot(HamSentiment, aes(x = song)) +
  geom_col(aes(y = pos), linetype = 1, color = "black", alpha = 0.6, 
    fill = "sienna1") +
  geom_col(aes(y = neg), linetype = 1, color = "black", alpha = 0.6, 
    fill = "skyblue2") +
  coord_flip() + labs(title = "Lyrical Sentiment in Hamilton", x = "song",
    y = "sentiment by individual words")
print(HamPlot)


BeatlesAlbums <- read.csv("BeatlesAlbums.csv", stringsAsFactors = FALSE) %>% 
  as_tibble()
# Wrote ugly code to get these album_ids; easier to preserve them then the code
BeatlesAlbum_ids <- c(27343, 29389, 27184, 21431, 22530, 12347, 17342, 11039, 
  12416, 16366, 29391, 12411, 29393)
BeatlesTracklists <- lapply(BeatlesAlbum_ids, scrape_tracklist)
BeatlesLyrics <- list()
for (album in 1:13) {
  BeatlesLyrics[[album]] <- lapply(BeatlesTracklists[[album]]$song_lyrics_url, 
    scrape_lyrics_url)}
BeatlesTokens <- list()
for (album in 1:13) {
  BeatlesTokens[[album]] <- lapply(BeatlesLyrics[[album]], 
    unnest_tokens, word, line)}

BeatlesSentA <- list() # afinn_join()
BeatlesSentB <- list() # inner_join(bing)
BeatlesSentC <- list() # inner_join(afinn)
for (album in 1:13) {
  BeatlesSentA[[album]] <- cbind.data.frame(
    BeatlesTracklists[[album]]$song_title,
    lapply(BeatlesTokens[[album]], afinn_join) %>% sapply(positive_sent),
    lapply(BeatlesTokens[[album]], afinn_join) %>% sapply(negative_sent),
    sapply(BeatlesTokens[[album]], song_length)
    )
  BeatlesSentB[[album]] <- cbind.data.frame(
    BeatlesTracklists[[album]]$song_title,
    lapply(BeatlesTokens[[album]], inner_join, bing, "word") %>%
      sapply(bing_positive_sent),
    lapply(BeatlesTokens[[album]], inner_join, bing, "word") %>%
      sapply(bing_negative_sent),
    sapply(BeatlesTokens[[album]], song_length)
    )
  BeatlesSentC[[album]] <- cbind.data.frame(
    BeatlesTracklists[[album]]$song_title,
    lapply(BeatlesTokens[[album]], inner_join, afinn, "word") %>%
      sapply(positive_sent),
    lapply(BeatlesTokens[[album]], inner_join, afinn, "word") %>%
      sapply(negative_sent),
    sapply(BeatlesTokens[[album]], song_length)
    )
  names(BeatlesSentA[[album]]) <- c("song", "pos", "neg", "wlength")
  names(BeatlesSentB[[album]]) <- c("song", "pos", "neg", "wlength")
  names(BeatlesSentC[[album]]) <- c("song", "pos", "neg", "wlength")
}

B <- bind_rows(BeatlesSentB, .id = "album") %>% as_tibble()
C <- bind_rows(BeatlesSentC, .id = "album") %>% as_tibble()

A <- bind_rows(BeatlesSentA, .id = "album") %>% as_tibble()
A <- A %>% mutate(dif = pos + neg)
BeatlesSimple <- bind_rows(A,B,C, .id = "method")

# Set to factors for ordering in ggplot
# Duplicate songs: "Yellow Submarine" and "All You Need Is Love"
A$song[[152]] <- "yellow submarine"
A$song[[157]] <- "all you need is love"
A$song <- factor(A$song, levels = unique(as.character(A$song)))
A$album <- factor(A$album, levels = unique(as.character(A$album)))

A2 <- A %>% mutate(pos2 = 
  abs( pos * (wlength-mean(wlength)/sd(wlength)) ), neg2 =
  -1 * abs( neg * (wlength-mean(wlength)/sd(wlength)) ) )

A3 <- A %>% mutate(pos3 = pos/wlength, neg3 = neg/wlength)


BeatlesPlotA <- ggplot(A, aes(x = song), linetype = 1) + 
  geom_col(aes(y = pos, fill = album), color = "black", alpha = 0.6) +
  geom_col(aes(y = neg), color = "black", alpha = 0.4) +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        legend.position = "none") +
  labs(title = "Half of What I Say is Meaningless", 
       subtitle = "Sentiment Analysis of The Beatles' Lyrics",
       y = "negativity / positivity")

BeatlesPlotA3 <- ggplot(A3, aes(x = song), linetype = 1) + 
  geom_col(aes(y = pos3, fill = album), color = "black", alpha = 0.6) +
  geom_col(aes(y = neg3), color = "black", alpha = 0.4) +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        legend.position = "none") +
  labs(title = "Half of What I Say is Meaningless", 
       subtitle = "Sentiment Analysis of The Beatles' Lyrics",
       y = "negativity / positivity")
print(BeatlesPlotA3)

BeatlesPlotA +
  annotate(geom = "text", x = 121, y = -30, angle = 90, size = 4,
    label = "All You Need Is Love") +
  annotate(geom = "text", x = 170, y = 40, angle = 90, size = 4,
    label = "I Want You (She's So Heavy)") +
  annotate(geom = "text", x = 160, y = -30, angle = 90, size = 3,
    label = "George Martin's songs on Yellow Submarine")


print(BeatlesPlotA)

BeatlesLength <- ggplot(A, aes(x = album, y = wlength)) + geom_boxplot() +
  scale_x_discrete(labels = BeatlesAlbums$Title)
print(BeatlesLength)

